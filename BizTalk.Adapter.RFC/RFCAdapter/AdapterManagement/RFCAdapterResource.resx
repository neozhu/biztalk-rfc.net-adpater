<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="virtualDirectoryName" xml:space="preserve">
    <value>Virtual Directory</value>
  </data>
  <data name="virtualDirectoryDesc" xml:space="preserve">
    <value>Enter virtual directory, including query string</value>
  </data>
  <data name="returnContentTypeName" xml:space="preserve">
    <value>Return Content Type</value>
  </data>
  <data name="returnContentTypeDesc" xml:space="preserve">
    <value>Enter content type to be used for the HTTP repsonse</value>
  </data>
  <data name="loopBackName" xml:space="preserve">
    <value>Loop Back</value>
  </data>
  <data name="loopBackDesc" xml:space="preserve">
    <value>Select loopback to route the request back as the response</value>
  </data>
  <data name="endpointCategory" xml:space="preserve">
    <value>Endpoint Configuration</value>
  </data>
  <data name="tuningCategory" xml:space="preserve">
    <value>Tuning Parameters</value>
  </data>
  <data name="errorThresholdName" xml:space="preserve">
    <value>Error Threshold</value>
  </data>
  <data name="destinationUrlName" xml:space="preserve">
    <value>Destination Url</value>
  </data>
  <data name="destinationUrlDesc" xml:space="preserve">
    <value>Enter the destination URI that identifies the Internet resource that the message will be sent to</value>
  </data>
  <data name="transmitLocationCategory" xml:space="preserve">
    <value>Transmit Location</value>
  </data>
  <data name="methodName" xml:space="preserve">
    <value>RFC Method</value>
  </data>
  <data name="methodDesc" xml:space="preserve">
    <value>Enter the RFC function request method to use when contacting the Internet resource</value>
  </data>
  <data name="getName" xml:space="preserve">
    <value>GET</value>
  </data>
  <data name="headName" xml:space="preserve">
    <value>HEAD</value>
  </data>
  <data name="postName" xml:space="preserve">
    <value>POST</value>
  </data>
  <data name="timeoutName" xml:space="preserve">
    <value>Time out</value>
  </data>
  <data name="timeoutDesc" xml:space="preserve">
    <value>Enter the time-out value for the HTTP request</value>
  </data>
  <data name="contentTypeName" xml:space="preserve">
    <value>ContentType</value>
  </data>
  <data name="contentTypeDesc" xml:space="preserve">
    <value>Enter content type of the HTTP request</value>
  </data>
  <data name="authenticationTypeName" xml:space="preserve">
    <value>Authentication Type</value>
  </data>
  <data name="authenticationTypeDesc" xml:space="preserve">
    <value>Enter the type of Authentication to use to contact the Internet resource</value>
  </data>
  <data name="securityCategory" xml:space="preserve">
    <value>Security Settings</value>
  </data>
  <data name="kerberosName" xml:space="preserve">
    <value>Kerberos</value>
  </data>
  <data name="anonymousName" xml:space="preserve">
    <value>Anonymous</value>
  </data>
  <data name="appServerHostDesc" xml:space="preserve">
    <value>SAP Application Server Name or IP. eg.sapdtm01.feili.com</value>
  </data>
  <data name="appServerHostName" xml:space="preserve">
    <value>SAP application Server Host</value>
  </data>
  <data name="clientDesc" xml:space="preserve">
    <value>SAP Client Number eg.212,800</value>
  </data>
  <data name="clientName" xml:space="preserve">
    <value>Client Number</value>
  </data>
  <data name="connectionIdleTimeoutDesc" xml:space="preserve">
    <value>Connection Idle Timeout</value>
  </data>
  <data name="connectionIdleTimeoutName" xml:space="preserve">
    <value>Connection Idle Timeout</value>
  </data>
  <data name="destinationNameDesc" xml:space="preserve">
    <value>Name to identify SAP System by code.</value>
  </data>
  <data name="destinationNameName" xml:space="preserve">
    <value>Destination Name</value>
  </data>
  <data name="languageDesc" xml:space="preserve">
    <value>The logon language eg.ZH</value>
  </data>
  <data name="languageName" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="passwordDesc" xml:space="preserve">
    <value>The logon password  eg.soapcall</value>
  </data>
  <data name="passwordName" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="peakConnectionsLimitDesc" xml:space="preserve">
    <value>Peak Connections Limit</value>
  </data>
  <data name="peakConnectionsLimitName" xml:space="preserve">
    <value>Peak Connections Limit</value>
  </data>
  <data name="poolSizeDesc" xml:space="preserve">
    <value>Pool Size</value>
  </data>
  <data name="poolSizeName" xml:space="preserve">
    <value>Pool Size</value>
  </data>
  <data name="programIdDesc" xml:space="preserve">
    <value>RFC Program Name eg."TM-KSJD-404"</value>
  </data>
  <data name="programIdName" xml:space="preserve">
    <value>Program Id</value>
  </data>
  <data name="schemaAssemblyDesc" xml:space="preserve">
    <value>Select Assembly Schema Full Name eg."BizTalk.RFC.Schemas,Version=1.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"</value>
  </data>
  <data name="schemaAssemblyName" xml:space="preserve">
    <value>Assembly Schema</value>
  </data>
  <data name="systemNumberDesc" xml:space="preserve">
    <value>the System Number of SAP Application Server</value>
  </data>
  <data name="systemNumberName" xml:space="preserve">
    <value>System Number</value>
  </data>
  <data name="userDesc" xml:space="preserve">
    <value>The logon User Name eg.soapcall</value>
  </data>
  <data name="userName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="reponseSchemaTypeDesc" xml:space="preserve">
    <value>Select Response XML message structure of the RFC executed in the SAP Application Host  eg."BizTalk.RFC.TM_KSJD_416.Schemas.OUTPUT.Z2FM_QO_FSLKW_RES, BizTalk.RFC.TM_KSJD_416, Version=1.0.0.0, Culture=neutral, PublicKeyToken=716ec3e5ecb9ba65"</value>
  </data>
  <data name="reponseSchemaTypeName" xml:space="preserve">
    <value>Response Schema Type</value>
  </data>
  <data name="requestSchemaTypeDesc" xml:space="preserve">
    <value>Select Request XML message structure for the composite operations exposed by the RFC.NET adapter eg."BizTalk.RFC.TM_KSJD_416.Schemas.INPUT.Z2FM_QO_FSLKW, BizTalk.RFC.TM_KSJD_416, Version=1.0.0.0, Culture=neutral, PublicKeyToken=716ec3e5ecb9ba65"</value>
  </data>
  <data name="requestSchemaTypeName" xml:space="preserve">
    <value>Request Schema Type</value>
  </data>
</root>